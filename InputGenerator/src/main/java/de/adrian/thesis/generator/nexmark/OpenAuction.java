package de.adrian.thesis.generator.nexmark;/*
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/

// encapsulates information about an open auction that must be saved

import java.util.Random;

/**
 * An action corresponds to exactly one item. Therefore, there is no specific item class.
 */
class OpenAuction {

    private static final int MAX_AUCTION_LENGTH_SEC = 24 * 60 * 60; // 24 hours
    private static final int MIN_AUCTION_LENGTH_SEC = 2 * 60 * 60; // 2 hours

    private int currPrice;
    private boolean closed = false;
    private long endTime;
    private int numBids = 0; // for debugging purposes
    private Random random;

    OpenAuction(SimpleCalendar cal, long itemId, Random random) {
        currPrice = random.nextInt(200) + 1;
        endTime = cal.getTimeInSecs() + random.nextInt(MAX_AUCTION_LENGTH_SEC) + MIN_AUCTION_LENGTH_SEC;
        this.random = random;
    }

    public int increasePrice() {
        int increase = random.nextInt(25) + 1; // zero increases not allowed
        currPrice += increase;
        return currPrice;
    }

    public int getCurrPrice() {
        return currPrice;
    }

    public long getEndTime() {
        return endTime;
    }

    public boolean isClosed(SimpleCalendar cal) {
        checkClosed(cal);
        return closed;
    }

    public void recordBid() {
        numBids++;
    }

    public int getBidsForAuction() {
        return numBids;
    }

    private void checkClosed(SimpleCalendar cal) {
        if (!closed && (cal.getTimeInSecs())
                > endTime) {
            //System.err.println("KT closing auction. Number of Bids: " + numBids);
            closed = true;
        }
        // KT - here is where we could create a closed_auction element
        // or do something to get a closed_auction created
        // but I'm not going to do it now
    }
}

