package de.adrian.thesis.generator.nexmark;/*
   NEXMark Generator -- Niagara Extension to XMark Data Generator

   Acknowledgements:
   The NEXMark Generator was developed using the xmlgen generator 
   from the XMark Benchmark project as a basis. The NEXMark
   generator generates streams of auction elements (bids, items
   for auctions, persons) as opposed to the auction files
   generated by xmlgen.  xmlgen was developed by Florian Waas.
   See http://www.xml-benchmark.org for information.

   Copyright (c) Dept. of  Computer Science & Engineering,
   OGI School of Science & Engineering, OHSU. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and
   its documentation is hereby granted, provided that both the
   copyright notice and this permission notice appear in all copies
   of the software, derivative works or modified versions, and any
   portions thereof, and that both notices appear in supporting
   documentation.

   THE AUTHORS AND THE DEPT. OF COMPUTER SCIENCE & ENGINEERING 
   AT OHSU ALLOW USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION, 
   AND THEY DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES 
   WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

   This software was developed with support from NSF ITR award
   IIS0086002 and from DARPA through NAVY/SPAWAR 
   Contract No. N66001-99-1-8098.

*/

import java.util.Random;

class Persons {

    private static int PERSON_DISTRIBUTION_SIZE = 100;

    // persons dont go away so lowChunk is always 0
    private int highChunk = 1;
    private int currentId = -1;
    private Random random = new Random(283494);

    // creates the open auction instance as well as returning the new id
    synchronized int getNewId() {
        currentId++;
        int newId = currentId;
        if (newId == highChunk * PERSON_DISTRIBUTION_SIZE) {
            highChunk++;
        }
        return newId;
    }

    synchronized int getExistingId() {

        if (currentId == -1) {
            // TODO Ignore for now, that initially, some Auctions are created without actual persons
//            throw new IllegalStateException("No persons have been created so far");
        }

        int id = random.nextInt(PERSON_DISTRIBUTION_SIZE);
        id += getRandomChunkOffset();
        return id % currentId;
    }

    private int getRandomChunkOffset() {
        int chunkId = random.nextInt(highChunk);
        return chunkId * PERSON_DISTRIBUTION_SIZE;
    }
}

